-- MySQL Script generated by MySQL Workbench
-- Fri Dec  1 19:10:20 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema fitness_club_db
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `fitness_club_db` ;

-- -----------------------------------------------------
-- Schema fitness_club_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `fitness_club_db` DEFAULT CHARACTER SET utf8 ;
USE `fitness_club_db` ;

-- -----------------------------------------------------
-- Table `fitness_club_db`.`achievements`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`achievements` (
  `id_achievement` INT NOT NULL AUTO_INCREMENT,
  `achievement_description` VARCHAR(45) NOT NULL,
  `achievement_title` VARCHAR(45) NOT NULL,
  `achievement_icon_url` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`id_achievement`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`activity_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`activity_type` (
  `id_activity` INT NOT NULL AUTO_INCREMENT,
  `activity_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_activity`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`clubs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`clubs` (
  `club_name` VARCHAR(45) NOT NULL,
  `address` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`club_name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`clubs_have_news`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`clubs_have_news` (
  `club_name` VARCHAR(45) NOT NULL,
  `id_news` INT NOT NULL,
  PRIMARY KEY (`club_name`, `id_news`),
  INDEX `fk_clubs_have_news_clubs1_idx` (`club_name` ASC) VISIBLE,
  INDEX `fk_clubs_have_news_news1_idx` (`id_news` ASC) VISIBLE,
  CONSTRAINT `fk_clubs_have_news_clubs1`
    FOREIGN KEY (`club_name`)
    REFERENCES `fitness_club_db`.`clubs` (`club_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_clubs_have_news_news1`
    FOREIGN KEY (`id_news`)
    REFERENCES `fitness_club_db`.`news` (`id_news`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`equipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`equipment` (
  `id_equipment` INT NOT NULL AUTO_INCREMENT,
  `id_equipment_type` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `quantity` INT NULL,
  PRIMARY KEY (`id_equipment`),
  INDEX `fk_equipment_equipment_type1_idx` (`id_equipment_type` ASC) VISIBLE,
  CONSTRAINT `fk_equipment_equipment_type1`
    FOREIGN KEY (`id_equipment_type`)
    REFERENCES `fitness_club_db`.`equipment_type` (`id_equipment_type`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`equipment_statistics`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`equipment_statistics` (
  `id_statistics` INT NOT NULL AUTO_INCREMENT,
  `id_activity` INT NOT NULL,
  `approaches` INT NULL,
  `kilocalories` INT NULL,
  PRIMARY KEY (`id_statistics`),
  INDEX `fk_equipment_statistics_activity_type1_idx` (`id_activity` ASC) VISIBLE,
  CONSTRAINT `fk_equipment_statistics_activity_type1`
    FOREIGN KEY (`id_activity`)
    REFERENCES `fitness_club_db`.`activity_type` (`id_activity`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`equipment_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`equipment_type` (
  `id_equipment_type` INT NOT NULL AUTO_INCREMENT,
  `type_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_equipment_type`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`feedback`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`feedback` (
  `id_feedback` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `feedback_text` VARCHAR(45) NULL,
  `feedback_date` DATE NULL,
  `rating` INT(10) NULL,
  PRIMARY KEY (`id_feedback`, `username`),
  INDEX `fk_feedback_members_accounts1_idx` (`username` ASC) VISIBLE,
  CONSTRAINT `fk_feedback_members_accounts1`
    FOREIGN KEY (`username`)
    REFERENCES `fitness_club_db`.`members_accounts` (`username`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`gyms`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`gyms` (
  `id_gym` INT NOT NULL AUTO_INCREMENT,
  `club_name` VARCHAR(45) NOT NULL,
  `gym_name` VARCHAR(45) NOT NULL,
  `capacity` INT NOT NULL,
  `available_hours` INT NOT NULL,
  PRIMARY KEY (`id_gym`),
  INDEX `fk_gyms_clubs1_idx` (`club_name` ASC) VISIBLE,
  CONSTRAINT `fk_gyms_clubs1`
    FOREIGN KEY (`club_name`)
    REFERENCES `fitness_club_db`.`clubs` (`club_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`gyms_have_equipment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`gyms_have_equipment` (
  `id_gym` INT NOT NULL,
  `id_equipment` INT NOT NULL,
  PRIMARY KEY (`id_gym`, `id_equipment`),
  INDEX `fk_gyms_have_equipment_equipment1_idx` (`id_equipment` ASC) VISIBLE,
  INDEX `fk_gyms_have_equipment_gyms1_idx` (`id_gym` ASC) VISIBLE,
  CONSTRAINT `fk_gyms_have_equipment_equipment1`
    FOREIGN KEY (`id_equipment`)
    REFERENCES `fitness_club_db`.`equipment` (`id_equipment`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_gyms_have_equipment_gyms1`
    FOREIGN KEY (`id_gym`)
    REFERENCES `fitness_club_db`.`gyms` (`id_gym`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`inbody_analyses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`inbody_analyses` (
  `id_inbody_analys` INT NOT NULL AUTO_INCREMENT,
  `height` FLOAT NULL,
  `weight` FLOAT NULL,
  `bmi` FLOAT NULL,
  `fat_percent` FLOAT NULL,
  `muscle_persent` FLOAT NULL,
  PRIMARY KEY (`id_inbody_analys`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`members`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`members` (
  `id_member` INT NOT NULL AUTO_INCREMENT,
  `id_role` INT NOT NULL,
  `club_name` VARCHAR(45) NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `second_name` VARCHAR(45) NOT NULL,
  `phone_number` VARCHAR(11) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `birth_date` DATE NOT NULL,
  `start_trial_date` DATE NOT NULL,
  `end_trial_date` DATE NULL,
  `gender` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id_member`),
  INDEX `fk_members_Roles1_idx` (`id_role` ASC) VISIBLE,
  INDEX `fk_members_clubs1_idx` (`club_name` ASC) VISIBLE,
  CONSTRAINT `fk_members_Roles1`
    FOREIGN KEY (`id_role`)
    REFERENCES `fitness_club_db`.`membership_role` (`id_role`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_members_clubs1`
    FOREIGN KEY (`club_name`)
    REFERENCES `fitness_club_db`.`clubs` (`club_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`members_accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`members_accounts` (
  `username` VARCHAR(45) NOT NULL,
  `id_member` INT NOT NULL,
  `id_photo` INT NOT NULL,
  `password` VARCHAR(100) NOT NULL,
  `account_creation_date` DATE NOT NULL,
  `last_login` DATE NOT NULL,
  `user_role` VARCHAR(45) NOT NULL,
  INDEX `fk_accounts_members1_idx` (`id_member` ASC) VISIBLE,
  INDEX `fk_members_accounts_users_photo1_idx` (`id_photo` ASC) VISIBLE,
  PRIMARY KEY (`username`),
  CONSTRAINT `fk_accounts_members1`
    FOREIGN KEY (`id_member`)
    REFERENCES `fitness_club_db`.`members` (`id_member`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_members_accounts_users_photo1`
    FOREIGN KEY (`id_photo`)
    REFERENCES `fitness_club_db`.`users_photo` (`id_photo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`members_have_achievements`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`members_have_achievements` (
  `id_member` INT NOT NULL,
  `id_achievement` INT NOT NULL,
  `receipt_date` DATE NOT NULL,
  PRIMARY KEY (`id_member`, `id_achievement`),
  INDEX `fk_members_have_achievements_members1_idx` (`id_member` ASC) VISIBLE,
  INDEX `fk_members_have_achievements_achievements1_idx` (`id_achievement` ASC) VISIBLE,
  CONSTRAINT `fk_members_have_achievements_members1`
    FOREIGN KEY (`id_member`)
    REFERENCES `fitness_club_db`.`members` (`id_member`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_members_have_achievements_achievements1`
    FOREIGN KEY (`id_achievement`)
    REFERENCES `fitness_club_db`.`achievements` (`id_achievement`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`members_have_equipment_statistics`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`members_have_equipment_statistics` (
  `id_member` INT NOT NULL,
  `id_statistics` INT NOT NULL,
  PRIMARY KEY (`id_member`, `id_statistics`),
  INDEX `fk_members_have_equipment_statistics_members1_idx` (`id_member` ASC) VISIBLE,
  INDEX `fk_members_have_equipment_statistics_equipment_statistics1_idx` (`id_statistics` ASC) VISIBLE,
  CONSTRAINT `fk_members_have_equipment_statistics_members1`
    FOREIGN KEY (`id_member`)
    REFERENCES `fitness_club_db`.`members` (`id_member`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_members_have_equipment_statistics_equipment_statistics1`
    FOREIGN KEY (`id_statistics`)
    REFERENCES `fitness_club_db`.`equipment_statistics` (`id_statistics`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`members_have_inbody_analyses`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`members_have_inbody_analyses` (
  `id_member` INT NOT NULL,
  `id_inbody_analys` INT NOT NULL,
  PRIMARY KEY (`id_member`, `id_inbody_analys`),
  INDEX `fk_members_have_inbody_analyses_members1_idx` (`id_member` ASC) VISIBLE,
  INDEX `fk_members_have_inbody_analyses_inbody_analyses1_idx` (`id_inbody_analys` ASC) VISIBLE,
  CONSTRAINT `fk_members_have_inbody_analyses_members1`
    FOREIGN KEY (`id_member`)
    REFERENCES `fitness_club_db`.`members` (`id_member`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_members_have_inbody_analyses_inbody_analyses1`
    FOREIGN KEY (`id_inbody_analys`)
    REFERENCES `fitness_club_db`.`inbody_analyses` (`id_inbody_analys`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`members_have_training_schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`members_have_training_schedule` (
  `id_member` INT NOT NULL,
  `id_session` INT NOT NULL,
  PRIMARY KEY (`id_member`, `id_session`),
  INDEX `fk_members_have_training_schedule_members1_idx` (`id_member` ASC) VISIBLE,
  INDEX `fk_members_have_training_schedule_training_schedule1_idx` (`id_session` ASC) VISIBLE,
  CONSTRAINT `fk_members_have_training_schedule_members1`
    FOREIGN KEY (`id_member`)
    REFERENCES `fitness_club_db`.`members` (`id_member`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_members_have_training_schedule_training_schedule1`
    FOREIGN KEY (`id_session`)
    REFERENCES `fitness_club_db`.`training_schedule` (`id_session`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`members_have_visits_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`members_have_visits_history` (
  `id_member` INT NOT NULL,
  `id_visit` INT NOT NULL,
  PRIMARY KEY (`id_member`, `id_visit`),
  INDEX `fk_members_have_visits_history_visits_history1_idx` (`id_visit` ASC) VISIBLE,
  INDEX `fk_members_have_visits_history_members1_idx` (`id_member` ASC) VISIBLE,
  CONSTRAINT `fk_members_have_visits_history_visits_history1`
    FOREIGN KEY (`id_visit`)
    REFERENCES `fitness_club_db`.`visits_history` (`id_visit`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_members_have_visits_history_members1`
    FOREIGN KEY (`id_member`)
    REFERENCES `fitness_club_db`.`members` (`id_member`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`membership_role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`membership_role` (
  `id_role` INT NOT NULL AUTO_INCREMENT,
  `role_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_role`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`news`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`news` (
  `id_news` INT NOT NULL AUTO_INCREMENT,
  `news_title` VARCHAR(45) NOT NULL,
  `news_text` VARCHAR(200) NULL,
  PRIMARY KEY (`id_news`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`nutrition_plan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`nutrition_plan` (
  `id_plan` INT NOT NULL AUTO_INCREMENT,
  `id_member` INT NOT NULL,
  `nutrition_description` VARCHAR(100) NULL,
  `start_date` DATE NULL,
  `end_date` DATE NULL,
  PRIMARY KEY (`id_plan`),
  INDEX `fk_nutrition_plan_members1_idx` (`id_member` ASC) VISIBLE,
  CONSTRAINT `fk_nutrition_plan_members1`
    FOREIGN KEY (`id_member`)
    REFERENCES `fitness_club_db`.`members` (`id_member`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`position`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`position` (
  `id_position` INT NOT NULL AUTO_INCREMENT,
  `role_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_position`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`staff`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`staff` (
  `id_staff` INT NOT NULL AUTO_INCREMENT,
  `id_position` INT NOT NULL,
  `first_name` VARCHAR(45) NOT NULL,
  `second_name` VARCHAR(45) NOT NULL,
  `phone_number` VARCHAR(11) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `hire_date` DATE NOT NULL,
  `staff_about` VARCHAR(100) NULL,
  `gender` TINYINT(1) NOT NULL,
  PRIMARY KEY (`id_staff`),
  INDEX `fk_staff_Position1_idx` (`id_position` ASC) VISIBLE,
  CONSTRAINT `fk_staff_Position1`
    FOREIGN KEY (`id_position`)
    REFERENCES `fitness_club_db`.`position` (`id_position`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`staff_accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`staff_accounts` (
  `id_staff` INT NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `id_staff_photo` INT NOT NULL,
  `password` VARCHAR(100) NOT NULL,
  `last_login` DATE NOT NULL,
  `account_creation_date` DATE NOT NULL,
  `user_role` VARCHAR(45) NOT NULL,
  INDEX `fk_staff_accounts_staff1_idx` (`id_staff` ASC) VISIBLE,
  PRIMARY KEY (`username`),
  INDEX `fk_staff_accounts_staff-photo1_idx` (`id_staff_photo` ASC) VISIBLE,
  CONSTRAINT `fk_staff_accounts_staff1`
    FOREIGN KEY (`id_staff`)
    REFERENCES `fitness_club_db`.`staff` (`id_staff`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_staff_accounts_staff-photo1`
    FOREIGN KEY (`id_staff_photo`)
    REFERENCES `fitness_club_db`.`staff_photo` (`id_staff_photo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`staff_photo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`staff_photo` (
  `id_staff_photo` INT NOT NULL AUTO_INCREMENT,
  `image_url` VARCHAR(250) NULL,
  PRIMARY KEY (`id_staff_photo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`staff_schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`staff_schedule` (
  `id_schedule` INT NOT NULL AUTO_INCREMENT,
  `id_staff` INT NOT NULL,
  `club_name` VARCHAR(45) NOT NULL,
  `date` DATE NOT NULL,
  `shift` INT(3) NOT NULL,
  PRIMARY KEY (`id_schedule`),
  INDEX `fk_staff_shedule_clubs1_idx` (`club_name` ASC) VISIBLE,
  INDEX `fk_staff_schedule_staff1_idx` (`id_staff` ASC) VISIBLE,
  CONSTRAINT `fk_staff_shedule_clubs1`
    FOREIGN KEY (`club_name`)
    REFERENCES `fitness_club_db`.`clubs` (`club_name`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_staff_schedule_staff1`
    FOREIGN KEY (`id_staff`)
    REFERENCES `fitness_club_db`.`staff` (`id_staff`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`trainers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`trainers` (
  `id_trainer` INT NOT NULL AUTO_INCREMENT,
  `first_name` VARCHAR(45) NOT NULL,
  `second_name` VARCHAR(45) NOT NULL,
  `speciality` VARCHAR(45) NULL,
  `experience` INT NULL,
  `certifications` INT NULL,
  `phone_number` VARCHAR(11) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `hire_date` DATE NOT NULL,
  PRIMARY KEY (`id_trainer`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`trainers_accounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`trainers_accounts` (
  `username` VARCHAR(45) NOT NULL,
  `id_trainer` INT NOT NULL AUTO_INCREMENT,
  `id_trainers_photo` INT NOT NULL DEFAULT 1,
  `password` VARCHAR(100) NOT NULL,
  `last_login` DATE NOT NULL,
  `account_creation_date` DATE NOT NULL,
  `user_role` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`username`),
  INDEX `fk_trainers_accounts_trainers1_idx` (`id_trainer` ASC) VISIBLE,
  INDEX `fk_trainers_accounts_trainers_photo1_idx` (`id_trainers_photo` ASC) VISIBLE,
  CONSTRAINT `fk_trainers_accounts_trainers1`
    FOREIGN KEY (`id_trainer`)
    REFERENCES `fitness_club_db`.`trainers` (`id_trainer`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_trainers_accounts_trainers_photo1`
    FOREIGN KEY (`id_trainers_photo`)
    REFERENCES `fitness_club_db`.`trainers_photo` (`id_trainers_photo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`trainers_photo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`trainers_photo` (
  `id_trainers_photo` INT NOT NULL AUTO_INCREMENT,
  `image_url` VARCHAR(250) NULL,
  PRIMARY KEY (`id_trainers_photo`))
ENGINE = InnoDB
AUTO_INCREMENT = 1;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`training_schedule`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`training_schedule` (
  `id_session` INT NOT NULL AUTO_INCREMENT,
  `id_trainer` INT NOT NULL,
  `id_training_type` INT NOT NULL,
  `session_date` DATETIME NOT NULL,
  `session_time` INT(90) NOT NULL,
  INDEX `fk_personal_training_sessions_trainers1_idx` (`id_trainer` ASC) VISIBLE,
  INDEX `fk_training_schedule_training_type1_idx` (`id_training_type` ASC) VISIBLE,
  PRIMARY KEY (`id_session`),
  CONSTRAINT `fk_personal_training_sessions_trainers1`
    FOREIGN KEY (`id_trainer`)
    REFERENCES `fitness_club_db`.`trainers` (`id_trainer`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_training_schedule_training_type1`
    FOREIGN KEY (`id_training_type`)
    REFERENCES `fitness_club_db`.`training_type` (`id_training_type`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`training_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`training_type` (
  `id_training_type` INT NOT NULL AUTO_INCREMENT,
  `training_type_name` VARCHAR(45) NOT NULL,
  `workout_description` VARCHAR(300) NULL,
  PRIMARY KEY (`id_training_type`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`users_photo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`users_photo` (
  `id_photo` INT NOT NULL AUTO_INCREMENT,
  `image_url` VARCHAR(200) NULL,
  PRIMARY KEY (`id_photo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fitness_club_db`.`visits_history`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fitness_club_db`.`visits_history` (
  `id_visit` INT NOT NULL AUTO_INCREMENT,
  `visit_date` DATE NOT NULL,
  PRIMARY KEY (`id_visit`))
ENGINE = InnoDB;


USE `fitness_club_db`;
/*добавление данных в существующую таблицу после обновления данных*/
DELIMITER $$
CREATE DEFINER = CURRENT_USER TRIGGER
`fitness_club_db`.`achievements_AFTER_UPDATE`
AFTER UPDATE ON `achievements` FOR EACH ROW
BEGIN
  INSERT INTO members_have_achievements (receipt_date)
  VALUES (NOW());
END$$


/*добавление данных в создаваемую таблицу после обновления данных*/
create table equipment_supplies(
id_supply int,
date_supply datetime);

CREATE DEFINER = CURRENT_USER TRIGGER
`fitness_club_db`.`equipment_AFTER_UPDATE`
AFTER UPDATE ON `equipment` FOR EACH ROW
BEGIN
INSERT INTO `fitness_club_db`.`equipment_supplies`
(`id_supply`, `date_supply`)
  VALUES (NEW.id_equipment, NOW());
END$$


/*проверка добавляемых данных на корректность перед добавлением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`members_BEFORE_INSERT` BEFORE INSERT ON `members` FOR EACH ROW
BEGIN
IF NEW.end_trial_date < NEW.start_trial_date THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot insert a member with an end trial date earlier start date.';
  END IF;
END$$


/*сравнение добавляемого имени с существующими перед добавлением*/
CREATE DEFINER = CURRENT_USER TRIGGER 
`fitness_club_db`.`members_accounts_BEFORE_INSERT` BEFORE INSERT ON `members_accounts` FOR EACH ROW
BEGIN
IF EXISTS (SELECT 1 FROM `fitness_club_db`.`members_accounts` WHERE username = NEW.username) THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot insert a new member with an existing username.';
  END IF;
END$$


/*сравнение добавляемого имени с существующими перед изменением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`members_accounts_BEFORE_UPDATE` BEFORE UPDATE ON `members_accounts` FOR EACH ROW
BEGIN
IF EXISTS (SELECT 1 FROM `fitness_club_db`.`members_accounts` WHERE username = NEW.username) THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot change to an existing username.';
  END IF;
END$$


/*добавление данных в создаваемую таблицу после обновления данных*/
create table news_audit(
id int,
date_changed datetime);

CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`news_AFTER_UPDATE` AFTER UPDATE ON `news` FOR EACH ROW
BEGIN
INSERT INTO news_audit (id,date_changed)
  VALUES (NEW.id_news, NOW());
END$$


/*проверка добавляемых данных на корректность перед добавлением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`nutrition_plan_BEFORE_INSERT` BEFORE INSERT ON `nutrition_plan` FOR EACH ROW
BEGIN
IF NEW.end_date < NEW.start_date THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot insert a plan with a date in the past.';
  END IF;
END$$


/*сравнение добавляемого имени с существующими перед добавлением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`staff_accounts_BEFORE_INSERT` BEFORE INSERT ON `staff_accounts` FOR EACH ROW
BEGIN
IF EXISTS (SELECT 1 FROM `fitness_club_db`.`staff_accounts` WHERE username = NEW.username) THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot make a new account with an existing username.';
  END IF;
END$$


/*сравнение добавляемого имени с существующими перед изменением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`staff_accounts_BEFORE_UPDATE` BEFORE UPDATE ON `staff_accounts` FOR EACH ROW
BEGIN
IF EXISTS (SELECT 1 FROM `fitness_club_db`.`staff_accounts` WHERE username = NEW.username) THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot change to an existing username.';
  END IF;
END$$


/*удаление связаных данных после удаления данных*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`trainers_AFTER_DELETE` AFTER DELETE ON `trainers` FOR EACH ROW
BEGIN
DELETE FROM `fitness_club_db`.`training_schedule` WHERE id_trainer = OLD.id_trainer;
END$$


/*сравнение добавляемого имени с существующими перед добавлением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`trainers_accounts_BEFORE_INSERT` BEFORE INSERT ON `trainers_accounts` FOR EACH ROW
BEGIN
IF EXISTS (SELECT 1 FROM `fitness_club_db`.`trainers_accounts` WHERE username = NEW.username) THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot make a new account with an existing username.';
  END IF;
END$$


/*сравнение добавляемого имени с существующими перед изменением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`trainers_accounts_BEFORE_UPDATE` BEFORE UPDATE ON `trainers_accounts` FOR EACH ROW
BEGIN
IF EXISTS (SELECT 1 FROM `fitness_club_db`.`trainers_accounts` WHERE username = NEW.username) THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot change to an existing username.';
  END IF;
END$$


/*сравнение добавляемой даты с настоящей перед добавлением*/
CREATE DEFINER = CURRENT_USER TRIGGER
`fitness_club_db`.`training_schedule_BEFORE_INSERT`
BEFORE INSERT ON `training_schedule` FOR EACH ROW
BEGIN
IF NEW.session_date < CURDATE() THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot insert a session with a date in the past.';
  END IF;
END$$


/*добавление данных в создаваемую таблицу после обновления данных*/
create table training_schedule_audit(
id_session int, 
changed_at date);

CREATE DEFINER = CURRENT_USER TRIGGER 
`fitness_club_db`.`training_schedule_AFTER_UPDATE`
AFTER UPDATE ON `training_schedule` FOR EACH ROW
BEGIN
  INSERT INTO training_schedule_audit (`id_session`, `changed_at`)
  VALUES (NEW.id_session, NOW());
END$$


/*сравнение добавляемой даты с настоящей перед добавлением*/
CREATE DEFINER = CURRENT_USER TRIGGER `fitness_club_db`.`visits_history_BEFORE_INSERT` BEFORE INSERT ON `visits_history` FOR EACH ROW
BEGIN
IF NEW.visit_date > CURDATE() THEN 
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot insert a visit with a date in the past.';
  END IF;
END$$


/*удаление удаленных данных*/
CREATE TRIGGER training_schedule_AFTER_DELETE after delete on members_have_training_schedule FOR EACH ROW
BEGIN
DELETE FROM training_schedule WHERE id_session = OLD.id_session;
END$$


/*удаление удаленных данных*/
CREATE TRIGGER visits_history_AFTER_DELETE after delete on members_have_visits_history FOR EACH ROW
BEGIN
DELETE FROM visits_history WHERE id_visit = OLD.id_visit;
END$$


/*удаление удаленных данных*/
CREATE TRIGGER achievements_AFTER_DELETE after delete on members_have_achievements FOR EACH ROW
BEGIN
DELETE FROM achievements WHERE id_achievement = OLD.id_achievement;
END$$


/*удаление удаленных данных*/
CREATE TRIGGER inbody_analyses_AFTER_DELETE after delete on members_have_inbody_analyses FOR EACH ROW
BEGIN
DELETE FROM inbody_analyses WHERE id_inbody_analys = OLD.id_inbody_analys;
END$$


/*удаление удаленных данных*/
CREATE TRIGGER equipment_statistics_AFTER_DELETE after delete on members_have_equipment_statistics FOR EACH ROW
BEGIN
DELETE FROM equipment_statistics WHERE id_statistics = OLD.id_statistics;
END$$



CREATE PROCEDURE members_have_equipment_statistics_delete()
BEGIN
delete from members_have_equipment_statistics where id_statistics=1;
select *from equipment_statistics;
END$$

CREATE PROCEDURE members_have_inbody_analyses_delete()
BEGIN
delete from members_have_inbody_analyses where id_inbody_analys=1;
select *from inbody_analyses;
END$$

CREATE PROCEDURE members_have_achievements_delete()
BEGIN
delete from members_have_achievements where id_achievement=1;
select *from achievements;
END$$

CREATE PROCEDURE members_have_visits_history_delete()
BEGIN
delete from members_have_visits_history where id_visit=1;
select *from visits_history;
END$$

CREATE PROCEDURE members_have_training_schedule_delete()
BEGIN
delete from members_have_training_schedule where id_session=1;
select *from training_schedule;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `visits_history_add`()
BEGIN
insert into visits_history(visit_date) values
('2024-09-11');
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `staff_add`()
BEGIN
insert into staff (id_position,first_name,second_name,phone_number,email,hire_date,staff_about,gender) values
(3, "Сергей", "Михайлов", "222", "dgfg.p@gmail.com", "2020-10-2", "Какой-то мужик", 1);
END$$


CREATE DEFINER=`root`@`localhost` PROCEDURE `training_type_add`()
BEGIN
insert into training_type(training_type_name, workout_description) values
("Прыжки", "Групповые прыжки вверх с двух ног. Отличный способ бесполезно провести время. Развлекайтесь!");
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `visits_history_6_delete`()
BEGIN
DELETE FROM visits_history WHERE id_visit = 6;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `staff_5_delete`()
BEGIN
DELETE FROM staff WHERE id_staff = 5;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `training_type_delete`()
BEGIN
DELETE FROM training_type WHERE id_training_type = 5;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `members_feedback`()
BEGIN
select first_name,second_name,username,feedback_text,rating,feedback_date
from members
join members_accounts using (id_member)
join feedback using (username)
order by feedback_date asc;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `members_inbody_analyses`()
BEGIN
select first_name,second_name,height,weight,bmi,fat_percent,muscle_persent
from members
join members_have_inbody_analyses using (id_member)
join inbody_analyses using (id_inbody_analys);
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `members_nutrition_plan`()
BEGIN
select first_name,second_name,nutrition_description,start_date
from members
join nutrition_plan using (id_member)
order by start_date asc;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `members_roles`()
BEGIN
select role_name,first_name,second_name
from membership_role
join members using(id_role);
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `members_trainings`()
BEGIN
select username,first_name,second_name,session_date,session_time
from members_accounts join members using (id_member)
join members_have_training_schedule using (id_member)
join training_schedule using (id_session)
join training_type using (id_training_type)
order by session_date asc;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `members_visits`()
BEGIN
select first_name,second_name,visit_date
from members
join members_have_visits_history using(id_member)
join visits_history using(id_visit)
order by visit_date asc;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `staff_info`()
BEGIN
select first_name,second_name,username,role_name
from staff_accounts
join staff using(id_staff)
join position using(id_position);
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `staff_schedule`()
BEGIN
select first_name,second_name,staff_schedule.club_name,shift,weekday
from staff,staff_schedule,clubs
where staff.id_staff=staff_schedule.id_staff
and staff_schedule.club_name=clubs.club_name;
END$$

CREATE DEFINER=`root`@`localhost` PROCEDURE `trainers_trainings`()
BEGIN
select username,first_name,second_name,session_date,session_time
from trainers_accounts join trainers using (id_trainer)
join training_schedule using (id_trainer)
join training_type using (id_training_type)
order by session_date asc;
END$$



CREATE FUNCTION TotalMembersWithNutritionPlan(id_plan INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`nutrition_plan` WHERE `id_plan` = id_plan;
    RETURN total;
END$$

CREATE FUNCTION TotalTrainersWithTrainingType(id_training_type INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(DISTINCT `id_trainer`) INTO total FROM `fitness_club_db`.`training_schedule` WHERE `id_training_type` = id_training_type;
    RETURN total;
END$$

CREATE FUNCTION TotalStaffInPosition(id_position INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`staff` WHERE `id_position` = id_position;
    RETURN total;
END$$

CREATE FUNCTION TotalNewsForClub(club_name VARCHAR(45)) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`clubs_have_news` WHERE `club_name` = club_name;
    RETURN total;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `AverageRatingFeedbackForMember`(username VARCHAR(45)) RETURNS FLOAT
BEGIN
DECLARE avg_rating FLOAT;
    SELECT AVG(`rating`) INTO avg_rating FROM `fitness_club_db`.`feedback` WHERE `username` = username;
    RETURN avg_rating;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `members_amount_1`() RETURNS int
BEGIN
declare a int;
select count(members.first_name) into a 
from members,members_have_training_schedule,training_schedule
where training_schedule.id_session=1
and members_have_training_schedule.id_member=members.id_member
and training_schedule.id_session=members_have_training_schedule.id_session;
RETURN a;
END$$

CREATE DEFINER=`root`@`localhost` FUNCTION `TotalMemberOnTrainingDate`(dateon DATE) RETURNS int
BEGIN
DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`training_schedule` WHERE DATE(`session_date`) = dateon;
    RETURN total;
END$$

CREATE FUNCTION TotalVisitsOnDate(dateon DATE) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`visits_history` WHERE `visit_date` = dateon;
    RETURN total;
END$$

CREATE FUNCTION TotalEquipmentInGym(id INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`gyms_have_equipment` WHERE `id_gym` = id;
    RETURN total;
END$$

CREATE FUNCTION TotalEquipmentOfType(id INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`equipment` WHERE `id_equipment_type` = id;
    RETURN total;
END$$

CREATE FUNCTION TotalSessionsForTrainer(id INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`training_schedule` WHERE `id_trainer` = id;
    RETURN total;
END$$

CREATE FUNCTION TotalGymsInClub(nameon VARCHAR(45)) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`gyms` WHERE `club_name` = nameon;
    RETURN total;
END$$

CREATE FUNCTION TotalAchievementsForMember(id INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`members_have_achievements` WHERE `id_member` = id;
    RETURN total;
END$$

CREATE FUNCTION TotalMembersInClub(nameon VARCHAR(45)) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`members` WHERE `club_name` = nameon;
    RETURN total;
END$$

CREATE FUNCTION TotalMembersWithAchievement(id INT) RETURNS INT
BEGIN
    DECLARE total INT;
    SELECT COUNT(*) INTO total FROM `fitness_club_db`.`members_have_achievements` WHERE `id_achievement` = id;
    RETURN total;
END$$
DELIMITER ;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
